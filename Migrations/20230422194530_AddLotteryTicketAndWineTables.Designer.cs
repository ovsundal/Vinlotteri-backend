// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vinlotteri_backend.Data;

#nullable disable

namespace Vinlotteri_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230422194530_AddLotteryTicketAndWineTables")]
    partial class AddLotteryTicketAndWineTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Vinlotteri_backend.Data.Lottery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketsSold")
                        .HasColumnType("int");

                    b.Property<int>("TotalTickets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lotteries");
                });

            modelBuilder.Entity("Vinlotteri_backend.Data.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasWon")
                        .HasColumnType("bit");

                    b.Property<int?>("LotteryId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LotteryId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Vinlotteri_backend.Data.Wine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Awarded")
                        .HasColumnType("bit");

                    b.Property<int?>("LotteryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LotteryId");

                    b.ToTable("Wines");
                });

            modelBuilder.Entity("Vinlotteri_backend.Data.Ticket", b =>
                {
                    b.HasOne("Vinlotteri_backend.Data.Lottery", null)
                        .WithMany("Tickets")
                        .HasForeignKey("LotteryId");
                });

            modelBuilder.Entity("Vinlotteri_backend.Data.Wine", b =>
                {
                    b.HasOne("Vinlotteri_backend.Data.Lottery", null)
                        .WithMany("Prizes")
                        .HasForeignKey("LotteryId");
                });

            modelBuilder.Entity("Vinlotteri_backend.Data.Lottery", b =>
                {
                    b.Navigation("Prizes");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
